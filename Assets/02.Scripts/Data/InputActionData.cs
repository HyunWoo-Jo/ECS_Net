//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Settings/InputActionData.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @InputActionData: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionData()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionData"",
    ""maps"": [
        {
            ""name"": ""Player Standard"",
            ""id"": ""9abf9ea5-6ee6-44e5-b8fd-71a5decc00a7"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""ef53d973-cee7-4402-a684-0f5cc50c7f41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""90ed1b24-4721-49ca-81a6-41d628ec32e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9768bdfd-759a-485b-9fe7-7bf373da5e6e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d0e97c92-bd1b-4407-bf76-ca0732dc9150"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Player"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9b52fe13-f84a-4074-a3bc-3d4e6ae9ac4a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Player"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1b73b02d-25f6-4873-9d76-7d205f0eb9cb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""db55f1e8-6dda-4615-ae24-6a8747878d54"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""41195e2e-5b69-4757-b8f3-472f1fef27b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Standard
        m_PlayerStandard = asset.FindActionMap("Player Standard", throwIfNotFound: true);
        m_PlayerStandard_MoveUp = m_PlayerStandard.FindAction("MoveUp", throwIfNotFound: true);
        m_PlayerStandard_MoveRight = m_PlayerStandard.FindAction("MoveRight", throwIfNotFound: true);
    }

    ~@InputActionData()
    {
        Debug.Assert(!m_PlayerStandard.enabled, "This will cause a leak and performance issues, InputActionData.PlayerStandard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Standard
    private readonly InputActionMap m_PlayerStandard;
    private List<IPlayerStandardActions> m_PlayerStandardActionsCallbackInterfaces = new List<IPlayerStandardActions>();
    private readonly InputAction m_PlayerStandard_MoveUp;
    private readonly InputAction m_PlayerStandard_MoveRight;
    public struct PlayerStandardActions
    {
        private @InputActionData m_Wrapper;
        public PlayerStandardActions(@InputActionData wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_PlayerStandard_MoveUp;
        public InputAction @MoveRight => m_Wrapper.m_PlayerStandard_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerStandard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerStandardActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerStandardActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerStandardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerStandardActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IPlayerStandardActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IPlayerStandardActions instance)
        {
            if (m_Wrapper.m_PlayerStandardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerStandardActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerStandardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerStandardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerStandardActions @PlayerStandard => new PlayerStandardActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerStandardActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
}
